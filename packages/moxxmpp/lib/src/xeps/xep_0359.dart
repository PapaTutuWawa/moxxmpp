import 'package:moxxmpp/src/jid.dart';
import 'package:moxxmpp/src/managers/base.dart';
import 'package:moxxmpp/src/managers/data.dart';
import 'package:moxxmpp/src/managers/handlers.dart';
import 'package:moxxmpp/src/managers/namespaces.dart';
import 'package:moxxmpp/src/namespaces.dart';
import 'package:moxxmpp/src/stanza.dart';
import 'package:moxxmpp/src/stringxml.dart';

class StableIdData {
  const StableIdData(this.originId, this.stanzaIds);

  /// <origin-id />
  final String? originId;

  /// Stanza ids
  final List<StanzaId>? stanzaIds;

  XMLNode toOriginIdElement() {
    assert(
      originId != null,
      'Can only build the XML element if originId != null',
    );
    return XMLNode.xmlns(
      tag: 'origin-id',
      xmlns: stableIdXmlns,
      attributes: {'id': originId!},
    );
  }
}

/// Representation of a <stanza-id /> element.
class StanzaId {
  const StanzaId(
    this.id,
    this.by,
  );

  /// The unique stanza id.
  final String id;

  /// The JID the id was generated by.
  final JID by;

  XMLNode toXml() {
    return XMLNode.xmlns(
      tag: 'stanza-id',
      xmlns: stableIdXmlns,
      attributes: {
        'id': id,
        'by': by.toString(),
      },
    );
  }
}

class StableIdManager extends XmppManagerBase {
  StableIdManager() : super(stableIdManager);

  @override
  List<String> getDiscoFeatures() => [stableIdXmlns];

  @override
  List<StanzaHandler> getIncomingStanzaHandlers() => [
        StanzaHandler(
          stanzaTag: 'message',
          callback: _onMessage,
          // Before the MessageManager
          priority: -99,
        )
      ];

  @override
  Future<bool> isSupported() async => true;

  Future<StanzaHandlerData> _onMessage(
    Stanza message,
    StanzaHandlerData state,
  ) async {
    String? originId;
    List<StanzaId>? stanzaIds;
    final originIdElement = message.firstTag('origin-id', xmlns: stableIdXmlns);
    final stanzaIdElements =
        message.findTags('stanza-id', xmlns: stableIdXmlns);

    // Process the origin id
    if (originIdElement != null) {
      originId = originIdElement.attributes['id']! as String;
    }

    // Process the stanza id tag
    if (stanzaIdElements.isNotEmpty) {
      stanzaIds = stanzaIdElements
          .map(
            (element) => StanzaId(
              element.attributes['id']! as String,
              JID.fromString(element.attributes['by']! as String),
            ),
          )
          .toList();
    }

    return state
      ..extensions.set(
        StableIdData(
          originId,
          stanzaIds,
        ),
      );
  }
}
